(ns pr4.prototipo
  (:require
    [devcards.core :as devcards :refer-macros [defcard deftest defcard-rg]]
    [reagent.core :as reagent]
    [pr4.periodization :as periodization]
    [button :as material-Button]
    [slider :as material-slider]
    [select :as material-select]
    [menu-item :as material-menu-item]
    [form-control-label :as material-form-control-label]
    [checkbox :as material-checkbox]
    [expand-more :as material-icons-ExpandMore]
    [expand-less :as material-icons-ExpandLess]
    [search :as material-icons-search]
    [chevron-left]
    [chevron-right]
    [google-charts]
    [tick.alpha.api :as tick]
    [re-frame.core :as re-frame]
    [pr4.app-state :as app-state]
    [pr4.events :as events]
    [pr4.util :as util]
    [pr4.external-storage :as ext-store]
    [clojure.spec.alpha :as spec]
    [day8.re-frame.tracing :refer-macros [fn-traced defn-traced]]

    ;; [clojure.spec.gen.alpha :as gen]
    ;; [clojure.test.check.generators]
    ))

(devcards.core/start-devcard-ui!)

(defonce init-app-state
  (do
    (re-frame/clear-subscription-cache!)
    (ext-store/init-app-state)))

;; Clean default html page generated by figwheel.
;; (reagent/render [:div] (js/document.getElementById "app-cards"))

#_(defcard
  (str "# Periodiza")
  {}
  {:frame false
   :heading false})

(defonce devcards-hidden (reagent/atom []))

(defcard-rg hidding-cards
  (let [card-container-style #js {:display "flex"
                                  :justifyContent "space-evenly"
                                  :padding "20px 0"}]
    (fn [devcard-data _]
      [:div.card-container
       {:style card-container-style}
       [:> material-Button
        {:id "hide-all"
         :variant "outlined"
         :size "small"
         :color "secondary"
         :onClick #(doseq [hidden-atom @devcards-hidden]
                     (reset! hidden-atom true))}
        "hide all"]
       [:> material-Button
        {:id "show-all"
         :variant "outlined"
         :size "small"
         :color "secondary"
         :onClick #(doseq [hidden-atom @devcards-hidden]
                     (reset! hidden-atom false))}
        "show all"]]))
  {}
  {:frame false})

(defcard-rg Por-que-o-Periodiza?
  (fn [devcard-data _]
    (let [{:keys [hidden?]} @devcard-data]
      (swap! devcards-hidden conj hidden?)
      [:<>
       [:div.card-expander
        {:onClick #(swap! hidden? not)
         :style #js {:textAlign "center"
                     :padding "20px 0"}}
        [:h2 {:style #js {:textAlign "center"
                          :margin "20px 0 10px 0"}}
         "O que é o Periodiza?"]
        (if @hidden?
          [:> material-icons-ExpandMore
           {:style #js {:padding "0 10px"
                        :border "1px solid lightgray"
                        :borderRadius "7px"}}]
          [:> material-icons-ExpandLess
           {:style #js {:padding "0 10px"
                        :border "1px solid lightgray"
                        :borderRadius "7px"}}])]
       [:div.card-container
        (let [p-style #js {:textIndent "30px"}]
          [:div.component-container
           {:hidden @hidden?}
           [:p {:style p-style}
            "O Periodiza é uma ferramenta para o educador físico que faz um planejamento de longo prazo para seus alunos. O objetivo da ferramenta é ajudar em cálculos de volume e intensidade de treino sem restringí-lo, ou seja, dando a liberdade total para adaptar o planejamento a realidade de seu aluno."]
           ])]]))
  {:hidden? (reagent/atom false)}
  {:frame true
   :heading false})

(defcard-rg A-metodologia-da-periodização
  (fn [devcard-data _]
    (let [{:keys [hidden?]} @devcard-data]
      (swap! devcards-hidden conj hidden?)
      [:<>
       [:div.card-expander
        {:onClick #(swap! hidden? not)
         :style #js {:textAlign "center"
                     :padding "20px 0"}}
        [:h2 {:style #js {:textAlign "center"
                          :margin "20px 0 10px 0"}}
         "A metodologia da periodização"]
        (if @hidden?
          [:> material-icons-ExpandMore
           {:style #js {:padding "0 10px"
                        :border "1px solid lightgray"
                        :borderRadius "7px"}}]
          [:> material-icons-ExpandLess
           {:style #js {:padding "0 10px"
                        :border "1px solid lightgray"
                        :borderRadius "7px"}}])]
       [:div.card-container
        (let [p-style #js {:textIndent "30px"}]
          [:div.component-container
           {:hidden @hidden?}
           [:p {:style p-style}
            "O período total do planejamento é chamado de " [:b "macrociclo"], " divido em 3 fases: " [:b "básica"] ", " [:b "específica"] " e " [:b "transição"] "."]
           [:p {:style p-style}
            "A " [:b "fase básica"] " é responsável por uma adaptação do aluno, é caracterizada por um volume de treino alto e intensidade baixa."]
           [:p {:style p-style}
            "A " [:b "fase específica"] " é caracterizada por um volume baixo e uma intensidade alta, é o período em que o aluno encontra seu auge de intensidade. "]
           [:p {:style p-style}
            "A " [:b "fase de transição"] " é o período que antecede uma próxima periodização, com o objetivo de recuperar o aluno. "]
           ])]]))
  {:hidden? (reagent/atom true)}
  {:frame true
   :heading false})

(-> (new google-charts) (.load "current" #js {"packages" #js ["timeline"]}))

(defn draw-timeline-chart [element-id data-array-input chart-width]
  (fn []
    (let [g-charts-instance (new google-charts)
          el (-> js/document (.getElementById element-id))
          color-map {"Incorporação"  "#8869ad"
                     "Incorporativo" "#8869ad"
                     "Ordinário"     "#86acd3"
                     "Base"          "#86acd3"
                     "Estabilizador" "#b7a6cd"
                     "Choque 1"      "#b7a6cd"
                     "Choque 2"      "#3276b5"
                     "Controle"      "#4cb4b9"
                     "Auge"          "#3276b5"
                     "Recuperação"   "#83d1d5"
                     "Recuperativo"  "#83d1d5"
                     "Básica"        "#69419b"
                     "Específica"    "#2965af"
                     "Transição"     "#44a3a8"
                     "Macrocíclo"    "#3bbab5"}
          data-array (->> data-array-input
                          (map (fn [[type name start end]]
                                 [type name (color-map name) (tick/inst (str start "T00:00")) (tick/inst (str end "T00:00"))]))
                          (cons ["Type" "Name" #js {:role "style"} "Start" "End"])
                          (map clj->js)
                          clj->js)
          data #(-> g-charts-instance .-api .-visualization
                    (.arrayToDataTable data-array))
          options #js {:timeline #js {:showRowLabels false}}
          draw-fn (fn [] (let [chart (new (-> g-charts-instance .-api
                                              .-visualization .-Timeline) el)
                               select-handler (fn []
                                                (-> chart
                                                    (.getSelection)
                                                    first
                                                    (.-row)
                                                    (#(nth data-array-input % (last data-array-input)))
                                                    (#(re-frame/dispatch [::events/zoom-macro-timeline %]))))]
                           (-> g-charts-instance
                               (.-api)
                               (.-visualization)
                               (.-events)
                               (.addListener chart "select" select-handler))
                           (set! (-> el .-style .-width)
                                 (-> js/document
                                     (.getElementsByClassName "com-rigsomelight-devcard")
                                     (.item 0)
                                     .-clientWidth
                                     (* chart-width)
                                     (str "px")))
                           (-> chart (.draw (data) options))))]
      (-> g-charts-instance (.load draw-fn)))))

(declare draw-chart)
(declare sessions->chart-data2)
(declare normal-chart-options)

(defn redef-prdz-state
  [app-state]
  (get-in app-state [:domain :redefine-periodization :state]))
(re-frame/reg-sub
  ::redef-prdz-state
  redef-prdz-state)

(defn-traced redef-prdz-box-clicked
  [app-state [_ redef-prdz-state]]
  (-> app-state
      (assoc-in [:domain :redefine-periodization :state] redef-prdz-state)
      (assoc-in [:domain :backup] (:domain app-state))))
(re-frame/reg-event-db ::redef-prdz-box-clicked redef-prdz-box-clicked)

(defn redef-prdz-box-display
  [state]
  (case state
    "editing-goal-level" "none"
    "editing-week" "none"
    "editing-time" "none"
    "editing-duration" "none"
    "flex"))
(re-frame/reg-sub
  ::redef-prdz-box-display
  :<- [::redef-prdz-state]
  redef-prdz-box-display)

(defn redef-prdz-level-goal-display
  [state]
  (case state
    "editing-goal-level" {:display "flex"}
    {:display "none"}))
(re-frame/reg-sub
  ::redef-prdz-level-goal-display
  :<- [::redef-prdz-state]
  redef-prdz-level-goal-display)

(defn redef-prdz-week-display
  [state]
  (case state
    "editing-week" {:display "flex"}
    {:display "none"}))
(re-frame/reg-sub
  ::redef-prdz-week-display
  :<- [::redef-prdz-state]
  redef-prdz-week-display)

(defn redef-prdz-time-display
  [state]
  (case state
    "editing-time" "grid"
    "none"))
(re-frame/reg-sub
  ::redef-prdz-time-display
  :<- [::redef-prdz-state]
  redef-prdz-time-display)

(defn redef-prdz-duration-display
  [state]
  (case state
    "editing-duration" "flex"
    "none"))
(re-frame/reg-sub
  ::redef-prdz-duration-display
  :<- [::redef-prdz-state]
  redef-prdz-duration-display)

(defn-traced redef-prdz-edit-cancel
  [app-state]
  (assoc-in app-state [:domain]
            (get-in app-state [:domain :backup])))
(re-frame/reg-event-db ::redef-prdz-edit-cancel redef-prdz-edit-cancel)

(defn-traced redef-prdz-edit-ok
  [app-state]
  (-> app-state
      (update-in [:domain :redefine-periodization] dissoc :state)
      (update-in [:domain] dissoc :backup)))
(re-frame/reg-event-db ::redef-prdz-edit-ok redef-prdz-edit-ok)

(defn redef-prdz-buttons-display
  [state]
  (case state
    "editing-goal-level" {:display "flex"}
    "editing-week" {:display "flex"}
    "editing-time" {:display "flex"}
    "editing-duration" {:display "flex"}
    {:display "none"}))
(re-frame/reg-sub
  ::redef-prdz-buttons-display
  :<- [::redef-prdz-state]
  redef-prdz-buttons-display)

(defcard-rg Macrocíclo
  (fn [devcard-data _]
    (let [{:keys [hidden?]} @devcard-data]
      (swap! devcards-hidden conj hidden?)
      [:<>
       [:div.card-expander
        {:onClick #(swap! hidden? not)
         :style #js {:textAlign "center"}}
        (if @hidden?
          [:> material-icons-ExpandMore]
          [:> material-icons-ExpandLess])]
       [:div.card-container
        {:style #js {:display "flex"
                     :justifyContent "space-evenly"}}
        [:div.component-container
         {:hidden @hidden?}
         [(util/with-mount-fn
            [:div#session2-chart
             {:style #js {:paddingTop "20px" :height 200}
              :component-did-mount
                (draw-chart "session2-chart"
                            (sessions->chart-data2 @(re-frame/subscribe [::app-state/sessions]) @(re-frame/subscribe [::zoom-dates]))
                            0.95
                            (normal-chart-options 4085 14825 63 90))} "Carregando.."])]
         [(util/with-mount-fn
            [:div#macrocycle-timeline
             {:style #js {:paddingTop "20px" :height 250}
              :component-did-mount
                (draw-timeline-chart "macrocycle-timeline"
                                     @(re-frame/subscribe [::app-state/macrocycle-timeline])
                                     0.98)} "Carregando.."])]
         [(fn []
              (let [two-line-box #js {:display "flex"
                                  :flexFlow "column"
                                  :backgroundColor "#ebebeb"
                                  :alignItems "center"
                                  :flexGrow 1
                                  :padding "4px"
                                  :margin "10px 4px 0 4px"
                                  :boxShadow "1px 3px 6px 2px #0000003b"
                                  :cursor "pointer"}
                    adjust-area {:backgroundColor "#ebebeb"
                                 :height "10vh"
                                 :padding "0 10px"
                                 :display "flex"
                                 :flexDirection "column"
                                 :justifyContent "center"
                                 :alignItems "center"}
                    adjust-buttons-style {:backgroundColor "#ebebeb"
                                          :height "10vh"
                                          :display "flex"
                                          :justifyContent "space-around"
                                          :alignItems "center"
                                          :marginBottom "2px"}]
                [:<>
                 [:style
                 ".choose-button {
                    margin: 0 2px;
                    flex: 1;
                    padding: 4px;
                    box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.14),
                    0 1px 5px 0 rgba(0, 0, 0, 0.12),
                    0 3px 1px -2px rgba(0, 0, 0, 0.2);
                    border-radius: 4px;
                    cursor: pointer;
                  }
                  .selected-light{
                    background: #35b39d;
                    color: white;
                  }
                  .selected-dark{
                    background: #308c7c;
                    color: white;
                  }
                  .deselected{
                    background: none;
                    color: black;
                  }"]
                 [:div {:style #js {:display @(re-frame/subscribe [::redef-prdz-box-display])
                                   :flexWrap "wrap"}}
                 [:div {:style #js {:display "flex"
                                    :flexGrow 1}}
                  [:div
                   {:style two-line-box
                    :onClick #(re-frame/dispatch [::redef-prdz-box-clicked "editing-goal-level"])}
                   [:b @(re-frame/subscribe [::redefine-periodization-goal-txt])]
                   [:b @(re-frame/subscribe [::redefine-periodization-level-txt])]]
                  [:div
                   {:style two-line-box
                    :onClick #(re-frame/dispatch [::redef-prdz-box-clicked "editing-time"])}
                   [:b @(re-frame/subscribe [::redefine-periodization-session-time-target])]
                   [:span "Tempo da Sessão"]]]
                 [:div {:style #js {:display "flex"
                                    :flexGrow 1}}
                  [:div
                   {:style two-line-box
                    :onClick #(re-frame/dispatch [::redef-prdz-box-clicked "editing-week"])}
                   [:b (count @(re-frame/subscribe [::redefine-periodization-week-sessions])) "x"]
                   [:span "por Semana"]]
                  [:div
                   {:style two-line-box
                    :onClick #(re-frame/dispatch [::redef-prdz-box-clicked "editing-duration"])}
                   [:b @(re-frame/subscribe [::redef-prdz-planning-months-duration])]
                   [:span "de Planejamento"]]]]
                 [:div.goal
                  {:style (clj->js (merge adjust-area
                                          @(re-frame/subscribe [::redef-prdz-level-goal-display])))}
                  [:div
                   {:style #js {:fontSize "small"
                                :textAlign "center"
                                :color "#555"}}
                   "Objetivo"]
                  [:div
                   {:style #js {:display "flex"
                                :textAlign "center"
                                :alignSelf "stretch"}}
                   [:div.choose-button
                    {:class (@(re-frame/subscribe [::redefine-periodization-goal])
                                                  "Hipertrofia")
                     :onClick #(re-frame/dispatch [::redefine-periodization-goal-select "Hipertrofia"])}
                    "Hipertrofia"]
                   [:div.choose-button
                    {:class (@(re-frame/subscribe [::redefine-periodization-goal])
                                                  "Força")
                     :onClick #(re-frame/dispatch [::redefine-periodization-goal-select "Força"])}
                    "Força"]
                   [:div.choose-button
                    {:class (@(re-frame/subscribe [::redefine-periodization-goal])
                                                  "Potência")
                     :onClick #(re-frame/dispatch [::redefine-periodization-goal-select "Potência"])}
                    "Potência"]
                   [:div.choose-button
                    {:class (@(re-frame/subscribe [::redefine-periodization-goal])
                                                  "Resistência")
                     :onClick #(re-frame/dispatch [::redefine-periodization-goal-select "Resistência"])}
                    "Resistência"]]]
                 [:div.level
                  {:style (clj->js (merge adjust-area
                                          @(re-frame/subscribe [::redef-prdz-level-goal-display])))}
                  [:div
                   {:style #js {:fontSize "small"
                                :textAlign "center"
                                :color "#555"}}
                   "Nível"]
                  [:div
                   {:style #js {:display "flex"
                                :textAlign "center"
                                :alignSelf "stretch"}}
                   [:div.choose-button
                    {:class (@(re-frame/subscribe [::redefine-periodization-level])
                                                  "Iniciante")
                     :onClick #(re-frame/dispatch [::redefine-periodization-level-select "Iniciante"])}
                    "Iniciante"]
                   [:div.choose-button
                    {:class (@(re-frame/subscribe [::redefine-periodization-level])
                                                  "Intermediário")
                     :onClick #(re-frame/dispatch [::redefine-periodization-level-select "Intermediário"])}
                    "Intermediário"]
                   [:div.choose-button
                    {:class (@(re-frame/subscribe [::redefine-periodization-level])
                                                  "Avançado")
                     :onClick #(re-frame/dispatch [::redefine-periodization-level-select "Avançado"])}
                    "Avançado"]]]
                  [:div.week
                   {:style (clj->js (merge adjust-area
                                           @(re-frame/subscribe [::redef-prdz-week-display])))}
                   [:div
                    {:style #js {:fontSize "small"
                                 :textAlign "center"
                                 :color "#555"}}
                    "Sessões na Semana"]
                   [:div
                    {:style #js {:display "flex"
                                 :textAlign "center"
                                 :alignSelf "stretch"}}
                    [:div.choose-button
                     {:class (@(re-frame/subscribe [::redefine-periodization-week-sessions-class])
                                                   "Domingo")
                      :onClick #(re-frame/dispatch [::redefine-periodization-week-sessions-toggle "Domingo"])}
                     "Dom"]
                    [:div.choose-button
                     {:class (@(re-frame/subscribe [::redefine-periodization-week-sessions-class])
                                                   "Segunda")
                      :onClick #(re-frame/dispatch [::redefine-periodization-week-sessions-toggle "Segunda"])}
                     "Seg"]
                    [:div.choose-button
                     {:class (@(re-frame/subscribe [::redefine-periodization-week-sessions-class])
                                                   "Terça")
                      :onClick #(re-frame/dispatch [::redefine-periodization-week-sessions-toggle "Terça"])}
                     "Ter"]
                    [:div.choose-button
                     {:class (@(re-frame/subscribe [::redefine-periodization-week-sessions-class])
                                                   "Quarta")
                      :onClick #(re-frame/dispatch [::redefine-periodization-week-sessions-toggle "Quarta"])}
                     "Qua"]
                    [:div.choose-button
                     {:class (@(re-frame/subscribe [::redefine-periodization-week-sessions-class])
                                                   "Quinta")
                      :onClick #(re-frame/dispatch [::redefine-periodization-week-sessions-toggle "Quinta"])}
                     "Qui"]
                    [:div.choose-button
                     {:class (@(re-frame/subscribe [::redefine-periodization-week-sessions-class])
                                                   "Sexta")
                      :onClick #(re-frame/dispatch [::redefine-periodization-week-sessions-toggle "Sexta"])}
                     "Sex"]
                    [:div.choose-button
                     {:class (@(re-frame/subscribe [::redefine-periodization-week-sessions-class])
                                                   "Sábado")
                      :onClick #(re-frame/dispatch [::redefine-periodization-week-sessions-toggle "Sábado"])}
                     "Sab"]]]
                  [:div.adjust-session-time
                   {:style #js {:backgroundColor "#ebebeb"
                                :height "10vh"
                                :display @(re-frame/subscribe [::redef-prdz-time-display])
                                :grid "2fr 1fr / 1fr 1fr 1fr"}}
                   [:span
                    {:style #js {:gridArea "1 / 1 / 2 / 4"
                                 :placeSelf "end center"
                                 :fontSize "1.17em"}}
                    "Tempo Médio por Sessão"]
                   [:span
                    {:style #js {:gridArea "2 / 1"
                                 :placeSelf "center end"
                                 :backgroundColor "white"
                                 :borderRadius "30px"
                                 :width "30px"
                                 :height "30px"
                                 :fontSize "3em"
                                 :boxShadow "1px 1px 2px 0px black"
                                 :display "flex"
                                 :justifyContent "center"
                                 :alignItems "center"
                                 :cursor "pointer"}
                     :onClick #(re-frame/dispatch [::redefine-periodization-session-time-target-add -300])}
                    [:span {:style #js {:paddingBottom "7px"}} "-"]]
                   [:b
                    {:style #js {:gridArea "2 / 2"
                                 :placeSelf "center"
                                 :fontSize "1.57em"}}
                    @(re-frame/subscribe [::redefine-periodization-session-time-target])]
                   [:span
                    {:style #js {:gridArea "2 / 3"
                                 :placeSelf "center start"
                                 :backgroundColor "white"
                                 :borderRadius "30px"
                                 :width "30px"
                                 :height "30px"
                                 :textAlign "center"
                                 :fontSize "2em"
                                 :boxShadow "1px 1px 2px 0px black"
                                 :display "flex"
                                 :justifyContent "center"
                                 :alignItems "center"
                                 :cursor "pointer"}
                     :onClick #(re-frame/dispatch [::redefine-periodization-session-time-target-add 300])}
                    [:span {:style #js {:paddingBottom "2px"}} "+"]]]
                  [:div.duration-selector
                   {:style #js {:backgroundColor "#ebebeb"
                                :height "10vh"
                                :padding "0 10px"
                                :display @(re-frame/subscribe [::redef-prdz-duration-display])
                                :justifyContent "space-evenly"
                                :alignItems "center"}}
                   [(util/with-mount-fn
                      [:vaadin-date-picker
                       {:label "Início do planejamento"
                        :value @(re-frame/subscribe [::redefine-periodization-planning-start])
                        :component-did-mount
                        (fn [this]
                          (set! (-> (reagent/dom-node this) .-onchange)
                                #(re-frame/dispatch [::redefine-periodization-planning-start-event
                                                     (-> % .-target .-value)])))}])]
                   [(util/with-mount-fn
                      [:vaadin-date-picker
                       {:label "Final do planejamento"
                        :value @(re-frame/subscribe [::redefine-periodization-planning-end])
                        :component-did-mount
                        (fn [this]
                          (set! (-> (reagent/dom-node this) .-onchange)
                                #(re-frame/dispatch [::redefine-periodization-planning-end-event
                                                     (-> % .-target .-value)])))}])]]
                  [:div.duration-text
                   {:style #js {:backgroundColor "#ebebeb"
                                :height "8vh"
                                :padding "0 10px"
                                :display @(re-frame/subscribe [::redef-prdz-duration-display])
                                :flexDirection "column"
                                :alignItems "center"}}
                   [:div
                    {:style #js {:fontSize "small"
                                 :textAlign "center"
                                 :color "#555"}}
                    "Duração do Planejamento"]
                   [:div
                    {:style #js {:fontSize "medium"
                                 :textAlign "center"
                                 :color "black"}}
                    @(re-frame/subscribe [::redefine-periodization-planning-duration])]]
                 [:div
                  {:style (clj->js
                            (merge adjust-buttons-style
                                   @(re-frame/subscribe [::redef-prdz-buttons-display])))}
                  [:> material-Button
                   {:style #js {:backgroundColor "#3bbcb7"
                                :color "white"}
                    :variant "contained"
                    :onClick #(re-frame/dispatch [::redef-prdz-edit-cancel])}
                   "Cancelar"]
                  [:> material-Button
                   {:style #js {:width "110px"
                                :backgroundColor "#3bbcb7"
                                :color "white"}
                    :onClick #(re-frame/dispatch [::redef-prdz-edit-ok])
                    :variant "contained"}
                   "Ok"]]]))]]]]))
  {:hidden? (reagent/atom false)})

(spec/fdef macrocycle-timeline
  :args (spec/cat :sessions-per-week #{2 3 4 5 6}
                  :initial-date #{"2018-08-01" "2018-09-01" "2018-10-01" "2018-11-01" "2018-12-01" "2019-01-01" "2019-02-01" "2019-03-01" "2019-04-01" "2019-05-01" "2019-06-01" "2019-07-01"}
                  :end-date #{"2019-08-01" "2019-09-01" "2019-10-01" "2019-11-01" "2019-12-01" "2020-01-01" "2020-02-01" "2020-03-01" "2020-04-01" "2020-05-01" "2020-06-01" "2020-07-01" "2020-08-01"}))

(declare get-in-redefine-periodization)

(defn valid-redef-args?
  [app-state]
  (let [[days-of-training initial-date end-date sessions-time-target]
          (get-in-redefine-periodization app-state)
        total-days (util/days-difference end-date initial-date)
        days-per-micro (/ 28 (count days-of-training))
        micros-amount (Math.floor (/ total-days days-per-micro))]
    (cond
      (= 0 (count days-of-training))
        (do (js/alert "Selecione pelo menos um dia na semana de treino.")
            false)
      (< micros-amount 7)
        (do (js/alert "Desculpe, mas com essa alteração o planejamento fica muito curto.")
            false)
      (= 7 (count days-of-training))
        (do (js/alert "Não é bom ficar pelo menos um dia na semana sem treinar? É só uma sugestão ;)")
            true)
      (<= sessions-time-target 0)
        (do (js/alert "O tempo médio por sessão tem que ser maior que zero :/")
            false)
      :else true)))

(defn domain-sessions
  [days-of-training initial-date end-date sessions-time-target]
  (let [total-days (util/days-difference end-date initial-date)
        days-per-micro (/ 28 (count days-of-training))
        micros-amount (Math.floor (/ total-days days-per-micro))]
    (periodization/periodization-sessions (* 4 micros-amount) sessions-time-target)))

;; No futuro isso provavelmente vai precisar ser calculado a partir dos
;; dados domain.
(defn macrocycle-timeline [days-of-training initial-date end-date]
  (let [total-days (util/days-difference (util/plus-days end-date -3) initial-date)
        days-per-micro (/ 28 (count days-of-training))
        micros-amount (Math.floor (/ total-days days-per-micro))
        phases (remove zero? (periodization/count-phases micros-amount))
        mesos (mapcat #(periodization/phase-mesos %2 %1) ["Básica" "Específica" "Transição"] phases)
        micros (mapcat #(apply periodization/meso-micros %) (map vals mesos))
        offset-list #(->> %1 cycle (drop %2) (take (count %1)))
        final-micro-date
          (fn [start]
            (loop [i 4
                   date (util/plus-days start 1)
                   week-days-of-training (loop [current (util/plus-days start 1)
                                                index (.indexOf days-of-training (tick/day-of-week (tick/date current)))]
                                           (if (= -1 index)
                                             (recur (util/plus-days current 1)
                                                    (.indexOf days-of-training (tick/day-of-week (tick/date (util/plus-days current 1)))))
                                             (offset-list days-of-training index)))]
              (cond
                (= i 0) (util/plus-days date -1)
                (= (first week-days-of-training)
                   (tick/day-of-week (tick/date date)))
                (recur (dec i)
                       (util/plus-days date 1)
                       (offset-list week-days-of-training 1))
                :else (recur i (util/plus-days date 1) week-days-of-training))))
        micros->dates
          (fn [val [type category micros-amount]]
            (let [last-date (or (last (last val)) (util/plus-days initial-date -1))
                  final (-> (iterate final-micro-date last-date) (nth micros-amount))
                  start (util/plus-days last-date 1)]
              (conj val [type category (str start) (str final)])))
        macro-final-date (-> (iterate final-micro-date (util/plus-days initial-date -1)) (nth micros-amount))]
    (concat (reduce micros->dates [] (map #(into ["Micro" % 1]) micros))
            (reduce micros->dates [] (map #(into ["Meso" (:category %) (:micros-amount %)]) mesos))
            (reduce micros->dates [] (map #(into ["Fase" %1 %2])
                                          ["Básica" "Específica" "Transição"]
                                          phases))
            [["Macro" "Macrocíclo" initial-date (str macro-final-date)]])))

(defn redefine-periodization-goal-txt
  [app-state]
  (get-in app-state [:domain :redefine-periodization :goal]))
(re-frame/reg-sub
  ::redefine-periodization-goal-txt
  redefine-periodization-goal-txt)

(defn redefine-periodization-goal
  [goal]
  (assoc {"Hipertrofia"  "deselected"
          "Força"        "deselected"
          "Potência"     "deselected"
          "Resistência"  "deselected"}
         goal
         "selected-light"))
(re-frame/reg-sub
  ::redefine-periodization-goal
  :<- [::redefine-periodization-goal-txt]
  redefine-periodization-goal)

(defn-traced redefine-periodization-goal-select
  [app-state [event new-goal]]
  (assoc-in app-state [:domain :redefine-periodization :goal] new-goal))
(re-frame/reg-event-db
  ::redefine-periodization-goal-select
  redefine-periodization-goal-select)

(defn redefine-periodization-level-txt
  [app-state]
  (get-in app-state [:domain :redefine-periodization :level]))
(re-frame/reg-sub
  ::redefine-periodization-level-txt
  redefine-periodization-level-txt)

(defn redefine-periodization-level
  [level]
  (assoc {"Iniciante"     "deselected"
          "Intermediário" "deselected"
          "Avançado"      "deselected"}
         level
         "selected-light"))
(re-frame/reg-sub
  ::redefine-periodization-level
  :<- [::redefine-periodization-level-txt]
  redefine-periodization-level)

(defn-traced redefine-periodization-level-select
  [app-state [event new-level]]
  (assoc-in app-state [:domain :redefine-periodization :level] new-level))
(re-frame/reg-event-db
  ::redefine-periodization-level-select
  redefine-periodization-level-select)

(defn redefine-periodization-week-sessions
  [app-state]
  (get-in app-state [:domain :redefine-periodization :week-sessions]))
(re-frame/reg-sub
  ::redefine-periodization-week-sessions
  redefine-periodization-week-sessions)

(defn redefine-periodization-week-sessions-class
  [week-sessions]
  (let [to-class (fn [day yes-value]
                   (if (some #(= day %) week-sessions)
                     yes-value
                     "deselected"))]
    {"Domingo" (to-class "Domingo"  "selected-dark" )
     "Segunda" (to-class "Segunda"  "selected-light")
     "Terça"   (to-class "Terça"    "selected-dark" )
     "Quarta"  (to-class "Quarta"   "selected-light")
     "Quinta"  (to-class "Quinta"   "selected-dark" )
     "Sexta"   (to-class "Sexta"    "selected-light")
     "Sábado"  (to-class "Sábado"   "selected-dark" )}))
(re-frame/reg-sub
  ::redefine-periodization-week-sessions-class
  :<- [::redefine-periodization-week-sessions]
  redefine-periodization-week-sessions-class)

(defn redefine-periodization-week-sessions-toggle
  [{app-state :db} [event week-day]]
  (let [full-week ["Domingo" "Segunda" "Terça" "Quarta" "Quinta" "Sexta" "Sábado"]
        toggle-fn (fn [week-sessions]
                    (if ((set week-sessions) week-day)
                      (remove #{week-day} week-sessions)
                      (filter (-> week-sessions set (conj week-day)) full-week)))
        new-app-state (update-in app-state [:domain :redefine-periodization :week-sessions] toggle-fn)]
    (when (valid-redef-args? new-app-state)
      {:db new-app-state
       :dispatch-n [[::update-timeline] [::reset-sessions] [::update-calendar]]})))
(re-frame/reg-event-fx
  ::redefine-periodization-week-sessions-toggle
  redefine-periodization-week-sessions-toggle)

(defn redefine-periodization-planning-start
  [app-state]
  (get-in app-state [:domain :redefine-periodization :planning-start]))
(re-frame/reg-sub
  ::redefine-periodization-planning-start
  redefine-periodization-planning-start)

(defn-traced redefine-periodization-planning-start-event
  [{app-state :db} [event new-start-date]]
  (let [new-app-state (assoc-in app-state [:domain :redefine-periodization :planning-start] new-start-date)]
    (when (valid-redef-args? new-app-state)
      {:db new-app-state
       :dispatch-n [[::update-timeline] [::reset-sessions] [::update-calendar]]})))
(re-frame/reg-event-fx
  ::redefine-periodization-planning-start-event
  redefine-periodization-planning-start-event)

(defn redefine-periodization-planning-end
  [app-state]
  (get-in app-state [:domain :redefine-periodization :planning-end]))
(re-frame/reg-sub
  ::redefine-periodization-planning-end
  redefine-periodization-planning-end)

(defn-traced redefine-periodization-planning-end-event
  [{app-state :db} [event new-end-date]]
  (let [new-app-state (assoc-in app-state [:domain :redefine-periodization :planning-end] new-end-date)]
    (when (valid-redef-args? new-app-state)
      {:db new-app-state
       :dispatch-n [[::update-timeline] [::reset-sessions] [::update-calendar]]})))
(re-frame/reg-event-fx
  ::redefine-periodization-planning-end-event
  redefine-periodization-planning-end-event)

(defn redef-prdz-planning-months-duration
  [[planning-start planning-end]]
   (let [total-days (util/days-difference planning-end planning-start)
         months-amount (Math.round (/ total-days 30.5))
         days-reminder (rem total-days 30.5)
         months (if (zero? months-amount) 1 months-amount)]
     (str (when (> days-reminder 0) "+/- ") months (if (> months 1) " meses" " mês"))))
(re-frame/reg-sub
  ::redef-prdz-planning-months-duration
  :<- [::redefine-periodization-planning-start]
  :<- [::redefine-periodization-planning-end]
  redef-prdz-planning-months-duration)

(defn redefine-periodization-planning-duration
  [[planning-start planning-end]]
   (let [total-days (util/days-difference planning-end planning-start)
         months (quot total-days 30.5)
         days (Math.ceil (rem total-days 30.5))
         month-str (str months (if (> months 1) " meses" " mês"))
         days-str (cond
                    (> days 1) (str " e " days " dias")
                    (= days 1) (str " e " days " dia")
                    :else nil)]
     (str month-str days-str)))
(re-frame/reg-sub
  ::redefine-periodization-planning-duration
  :<- [::redefine-periodization-planning-start]
  :<- [::redefine-periodization-planning-end]
  redefine-periodization-planning-duration)

(defn redefine-periodization-session-time-target
  [app-state]
  (util/seconds->minute-text
    (get-in app-state [:domain :redefine-periodization :sessions-time-target])))
(re-frame/reg-sub
  ::redefine-periodization-session-time-target
  redefine-periodization-session-time-target)

(defn-traced redefine-periodization-session-time-target-add
  [{app-state :db} [event to-add]]
  (let [new-app-state (update-in app-state
                                 [:domain :redefine-periodization :sessions-time-target]
                                 + to-add)]
    (when (valid-redef-args? new-app-state)
      {:db new-app-state
       :dispatch-n [[::update-timeline] [::reset-sessions] [::update-calendar]]})))
(re-frame/reg-event-fx
  ::redefine-periodization-session-time-target-add
  redefine-periodization-session-time-target-add)

(defn get-in-redefine-periodization [app-state]
  (let [week-sessions (redefine-periodization-week-sessions app-state)
        days-of-training (mapv {"Segunda" tick/MONDAY "Terça" tick/TUESDAY "Quarta" tick/WEDNESDAY
                                "Quinta" tick/THURSDAY "Sexta" tick/FRIDAY "Sábado" tick/SATURDAY
                                "Domingo" tick/SUNDAY} week-sessions)
        start-date (redefine-periodization-planning-start app-state)
        end-date (redefine-periodization-planning-end app-state)
        sessions-time-target (get-in app-state [:domain :redefine-periodization :sessions-time-target])]
    [days-of-training start-date end-date sessions-time-target]))

(defn-traced update-timeline
  [app-state]
  (let [timeline (apply macrocycle-timeline (get-in-redefine-periodization app-state))
        [_ _ start end] (last timeline)]
    (-> app-state
        (assoc-in [:ui :macrocycle-timeline] timeline)
        (assoc-in [:ui :zoom-dates] [start end]))))
(re-frame/reg-event-db ::update-timeline update-timeline)

(defn-traced reset-sessions
  [app-state]
  (let [new-sessions (apply domain-sessions (get-in-redefine-periodization app-state))]
    (assoc-in app-state [:domain :sessions] new-sessions)))
(re-frame/reg-event-db ::reset-sessions reset-sessions)

(defn-traced update-calendar
  [app-state]
  (let [sessions (get-in app-state [:domain :sessions])
        week-sessions (redefine-periodization-week-sessions app-state)
        week-days-of-training (mapv {"Segunda" tick/MONDAY "Terça" tick/TUESDAY "Quarta" tick/WEDNESDAY
                                     "Quinta" tick/THURSDAY "Sexta" tick/FRIDAY "Sábado" tick/SATURDAY
                                     "Domingo" tick/SUNDAY} week-sessions)
        first-day (redefine-periodization-planning-start app-state)
        offset-list #(->> %1 cycle (drop %2) (take (count %1)))
        rearranged-week-days
          (loop [current (util/plus-days first-day 1)
                 index (.indexOf week-days-of-training (tick/day-of-week (tick/date current)))]
            (if (= -1 index)
              (recur (util/plus-days current 1)
                     (.indexOf week-days-of-training (tick/day-of-week (tick/date (util/plus-days current 1)))))
              (offset-list week-days-of-training index)))
        new-calendar-days
          (loop [idx 0
                 val []
                 current-day first-day
                 [current-session & sessions] sessions
                 [current-week-day & week-days] rearranged-week-days]
            (cond
              (nil? current-session) val
              (not= current-week-day (tick/day-of-week (tick/date current-day)))
                (recur idx
                       (conj val {})
                       (util/plus-days current-day 1)
                       (cons current-session sessions)
                       (cons current-week-day week-days))
              :else
                (recur (inc idx)
                       (conj val {:session-idx idx})
                       (util/plus-days current-day 1)
                       sessions
                       (concat week-days [current-week-day]))))]
    (assoc-in app-state [:domain :calendar] {:first-day first-day
                                             :days new-calendar-days})))
(re-frame/reg-event-db ::update-calendar update-calendar)

#_(defcard-rg Redefinir-Periodização
  (fn [devcard-data _]
    (let [{:keys [hidden?]} @devcard-data]
      (swap! devcards-hidden conj hidden?)
      [:<>
       [:div.card-expander
        {:onClick #(swap! hidden? not)
         :style #js {:textAlign "center"}}
        (if @hidden?
          [:> material-icons-ExpandMore]
          [:> material-icons-ExpandLess])]
       [:div.card-container
        {:style #js {:display "flex"
                     :justifyContent "space-evenly"}}
        [:div.component-container
         {:hidden @hidden?}
         [:style
          ".choose-button {
            margin: 0 2px;
            flex: 1;
            padding: 4px;
            box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.14),
                        0 1px 5px 0 rgba(0, 0, 0, 0.12),
                        0 3px 1px -2px rgba(0, 0, 0, 0.2);
            border-radius: 4px;
            cursor: pointer;
          }
          .selected-light{
            background: #35b39d;
            color: white;
          }
          .selected-dark{
            background: #308c7c;
            color: white;
          }
          .deselected{
            background: none;
            color: black;
          }"]
         [:div.goal
          {:style #js {:backgroundColor "#ebebeb"
                       :height "14vh"
                       :marginTop "2px"
                       :padding "0 10px"
                       :display "flex"
                       :flexDirection "column"
                       :justifyContent "center"
                       :alignItems "center"}}
          [:div
           {:style #js {:fontSize "small"
                        :textAlign "center"
                        :color "#555"}}
           "Objetivo"]
          [:div
           {:style #js {:display "flex"
                        :textAlign "center"
                        :alignSelf "stretch"}}
           [:div.choose-button
            {:class (@(re-frame/subscribe [::redefine-periodization-goal])
                                          "Hipertrofia")
             :onClick #(re-frame/dispatch [::redefine-periodization-goal-select "Hipertrofia"])}
            "Hipertrofia"]
           [:div.choose-button
            {:class (@(re-frame/subscribe [::redefine-periodization-goal])
                                          "Força")
             :onClick #(re-frame/dispatch [::redefine-periodization-goal-select "Força"])}
            "Força"]
           [:div.choose-button
            {:class (@(re-frame/subscribe [::redefine-periodization-goal])
                                          "Potência")
             :onClick #(re-frame/dispatch [::redefine-periodization-goal-select "Potência"])}
            "Potência"]
           [:div.choose-button
            {:class (@(re-frame/subscribe [::redefine-periodization-goal])
                                          "Resistência")
             :onClick #(re-frame/dispatch [::redefine-periodization-goal-select "Resistência"])}
            "Resistência"]]]
         [:div.level
          {:style #js {:backgroundColor "#ebebeb"
                       :height "14vh"
                       :padding "0 10px"
                       :display "flex"
                       :flexDirection "column"
                       :justifyContent "center"
                       :alignItems "center"}}
          [:div
           {:style #js {:fontSize "small"
                        :textAlign "center"
                        :color "#555"}}
           "Nível"]
          [:div
           {:style #js {:display "flex"
                        :textAlign "center"
                        :alignSelf "stretch"}}
           [:div.choose-button
            {:class (@(re-frame/subscribe [::redefine-periodization-level])
                                          "Iniciante")
             :onClick #(re-frame/dispatch [::redefine-periodization-level-select "Iniciante"])}
            "Iniciante"]
           [:div.choose-button
            {:class (@(re-frame/subscribe [::redefine-periodization-level])
                                          "Intermediário")
             :onClick #(re-frame/dispatch [::redefine-periodization-level-select "Intermediário"])}
            "Intermediário"]
           [:div.choose-button
            {:class (@(re-frame/subscribe [::redefine-periodization-level])
                                          "Avançado")
             :onClick #(re-frame/dispatch [::redefine-periodization-level-select "Avançado"])}
            "Avançado"]]]
         [:div.week
          {:style #js {:backgroundColor "#ebebeb"
                       :height "14vh"
                       :padding "0 10px"
                       :display "flex"
                       :flexDirection "column"
                       :justifyContent "center"
                       :alignItems "center"}}
          [:div
           {:style #js {:fontSize "small"
                        :textAlign "center"
                        :color "#555"}}
           "Sessões na Semana"]
          [:div
           {:style #js {:display "flex"
                        :textAlign "center"
                        :alignSelf "stretch"}}
           [:div.choose-button
            {:class (@(re-frame/subscribe [::redefine-periodization-week-sessions-class])
                                          "Domingo")
             :onClick #(re-frame/dispatch [::redefine-periodization-week-sessions-toggle "Domingo"])}
            "Dom"]
           [:div.choose-button
            {:class (@(re-frame/subscribe [::redefine-periodization-week-sessions-class])
                                          "Segunda")
             :onClick #(re-frame/dispatch [::redefine-periodization-week-sessions-toggle "Segunda"])}
            "Seg"]
           [:div.choose-button
            {:class (@(re-frame/subscribe [::redefine-periodization-week-sessions-class])
                                          "Terça")
             :onClick #(re-frame/dispatch [::redefine-periodization-week-sessions-toggle "Terça"])}
            "Ter"]
           [:div.choose-button
            {:class (@(re-frame/subscribe [::redefine-periodization-week-sessions-class])
                                          "Quarta")
             :onClick #(re-frame/dispatch [::redefine-periodization-week-sessions-toggle "Quarta"])}
            "Qua"]
           [:div.choose-button
            {:class (@(re-frame/subscribe [::redefine-periodization-week-sessions-class])
                                          "Quinta")
             :onClick #(re-frame/dispatch [::redefine-periodization-week-sessions-toggle "Quinta"])}
            "Qui"]
           [:div.choose-button
            {:class (@(re-frame/subscribe [::redefine-periodization-week-sessions-class])
                                          "Sexta")
             :onClick #(re-frame/dispatch [::redefine-periodization-week-sessions-toggle "Sexta"])}
            "Sex"]
           [:div.choose-button
            {:class (@(re-frame/subscribe [::redefine-periodization-week-sessions-class])
                                          "Sábado")
             :onClick #(re-frame/dispatch [::redefine-periodization-week-sessions-toggle "Sábado"])}
            "Sab"]]]
          [:div.adjust-session-time
           {:style #js {:backgroundColor "#ebebeb"
                        :height "12vh"
                        :display "grid"
                        :grid "2fr 1fr / 1fr 1fr 1fr"
                        }}
           [:span
            {:style #js {:gridArea "1 / 1 / 2 / 4"
                         :placeSelf "end center"
                         :fontSize "1.17em"}}
            "Tempo Médio por Sessão"]
           [:span
            {:style #js {:gridArea "2 / 1"
                         :placeSelf "center end"
                         :backgroundColor "white"
                         :borderRadius "30px"
                         :width "30px"
                         :height "30px"
                         :fontSize "3em"
                         :boxShadow "1px 1px 2px 0px black"
                         :display "flex"
                         :justifyContent "center"
                         :alignItems "center"
                         :cursor "pointer"}
             :onClick #(re-frame/dispatch [::redefine-periodization-session-time-target-add -300])}
            [:span {:style #js {:paddingBottom "7px"}} "-"]]
           [:b
            {:style #js {:gridArea "2 / 2"
                         :placeSelf "center"
                         :fontSize "1.57em"}}
            @(re-frame/subscribe [::redefine-periodization-session-time-target])]
           [:span
            {:style #js {:gridArea "2 / 3"
                         :placeSelf "center start"
                         :backgroundColor "white"
                         :borderRadius "30px"
                         :width "30px"
                         :height "30px"
                         :textAlign "center"
                         :fontSize "2em"
                         :boxShadow "1px 1px 2px 0px black"
                         :display "flex"
                         :justifyContent "center"
                         :alignItems "center"
                         :cursor "pointer"}
             :onClick #(re-frame/dispatch [::redefine-periodization-session-time-target-add 300])}
            [:span {:style #js {:paddingBottom "2px"}} "+"]]]
        [:div.duration-selector
         {:style #js {:backgroundColor "#ebebeb"
                      :height "14vh"
                      :padding "0 10px"
                      :display "flex"
                      :justifyContent "space-evenly"
                      :alignItems "center"}}
         [(util/with-mount-fn
            [:vaadin-date-picker
             {:label "Início do planejamento"
              :value @(re-frame/subscribe [::redefine-periodization-planning-start])
              :component-did-mount
                (fn [this]
                  (set! (-> (reagent/dom-node this) .-onchange)
                        #(re-frame/dispatch [::redefine-periodization-planning-start-event
                                             (-> % .-target .-value)])))}])]
         [(util/with-mount-fn
            [:vaadin-date-picker
             {:label "Final do planejamento"
              :value @(re-frame/subscribe [::redefine-periodization-planning-end])
              :component-did-mount
                (fn [this]
                  (set! (-> (reagent/dom-node this) .-onchange)
                        #(re-frame/dispatch [::redefine-periodization-planning-end-event
                                             (-> % .-target .-value)])))}])]]
        [:div.duration-text
         {:style #js {:backgroundColor "#ebebeb"
                      :height "10vh"
                      :padding "0 10px"
                      :display "flex"
                      :flexDirection "column"
                      :alignItems "center"}}
          [:div
           {:style #js {:fontSize "small"
                        :textAlign "center"
                        :color "#555"}}
           "Duração do Planejamento"]
          [:div
           {:style #js {:fontSize "medium"
                        :textAlign "center"
                        :color "black"}}
           @(re-frame/subscribe [::redefine-periodization-planning-duration])]]
         #_[:div.adjust-buttons
          {:style #js {:backgroundColor "#ebebeb"
                       :height "16vh"
                       :display "flex"
                       :justifyContent "space-around"
                       :alignItems "center"
                       :marginBottom "2px"}}
          [:> material-Button
           {:style #js {:backgroundColor "#3bbcb7"
                        :color "white"}
            :variant "contained"
            :onClick #(re-frame/dispatch [::events/session-adjust-canceled])}
           "Cancelar"]
          [:> material-Button
           {:style #js {
                        :width "110px"
                        :backgroundColor "#3bbcb7"
                        :color "white"}
            :onClick #(re-frame/dispatch [::events/session-adjust-confirmed])
            :variant "contained"}
           "Ok"]]
         ]]]))
  {:hidden? (reagent/atom false)})

;; TODO: use column role interval in volume and intensity
(defn sessions->chart-data [sessions selection]
  (let [row-fn (fn [index {:keys [total-sets reps-max]}]
                 #js [(str "Sessão " (inc index))
                      (periodization/session-volume reps-max total-sets)
                      (str "color: " (if (util/between? index selection) "#3bbcb7" "#b3e5e3"))
                      (periodization/reps-to-intensity reps-max)
                      (str "color: " (if (util/between? index selection) "#ffd237" "#ffe99c"))])]
    (->> sessions
         (map-indexed row-fn)
         (cons #js ["Sessão"
                    "Volume"
                    #js {:role "style"}
                    "Intensidade"
                    #js {:role "style"}])
         into-array)))

(defn sessions-with-dates-idx
  [app-state]
  (let [first-day (get-in app-state [:domain :calendar :first-day])
        days (get-in app-state [:domain :calendar :days])
        sessions (get-in app-state [:domain :sessions])
        idx-date (map #(into [(:session-idx %1) %2])
                      days
                      (iterate #(util/plus-days % 1) first-day))]
    (->> idx-date
         (remove #(-> % first nil?))
         (map (fn [[idx date]]
                (assoc
                  (nth sessions idx {:reps-min 20 :reps-max 20 :total-sets 1 :rest-time 10})
                  :date date
                  :idx idx))))))
(re-frame/reg-sub
  ::sessions-with-dates-idx
  sessions-with-dates-idx)

(defn zoom-dates [app-state]
  (get-in app-state [:ui :zoom-dates]))
(re-frame/reg-sub
  ::zoom-dates
  zoom-dates)

(defn date-str [date]
  (let [dd (tick/day-of-month date)
        MM (tick/int (tick/month date))
        yyyy (tick/int (tick/year date))
        day (tick/day-of-week date)
        pt-week {tick/MONDAY "Segunda"
                 tick/TUESDAY "Terça"
                 tick/WEDNESDAY "Quarta"
                 tick/THURSDAY "Quinta"
                 tick/FRIDAY "Sexta"
                 tick/SATURDAY "Sábado"
                 tick/SUNDAY "Domingo"}]
    (str dd "/" MM "/" yyyy
         " (" (clojure.string/join (take 3 (pt-week day))) ")")))

(declare reps->intensity-text)

(defn sessions->chart-data2 [_ _]
  (let [sessions-with-dates-idx @(re-frame/subscribe [::sessions-with-dates-idx])
        date-between? #(tick/<= (if %2 (tick/date %2) (tick/date %1))
                                (tick/date %1)
                                (if %3 (tick/date %3) (tick/date %1)))
        zoom-dates @(re-frame/subscribe [::zoom-dates])
        row-fn (fn [{:keys [idx date total-sets reps-max reps-min rest-time]}]
                 (let [vol-min (periodization/session-volume reps-min total-sets)
                       vol-max (periodization/session-volume reps-max total-sets)
                       int-min (periodization/reps-to-intensity reps-max)
                       int-max (periodization/reps-to-intensity reps-min)]
                   #js [(str "Sessão " (inc idx))
                      vol-min
                      "color: #3bbcb7"
                      (str "Sessão " (inc idx)
                           "\n" (date-str date)
                           "\n\n" total-sets " séries"
                           "\n" reps-min "-" reps-max " repetições")
                      vol-min
                      vol-max
                      int-min
                      "color: #ffd237"
                      (str "Sessão " (inc idx)
                           "\n" (date-str date)
                           "\n\nIntensidade: "
                           (reps->intensity-text
                             reps-min
                             reps-max) " de RM"
                           "\nRecuperação: " (util/seconds->minute-text rest-time))
                      int-min
                      int-max]))]
    (println "session-with-date" (first sessions-with-dates-idx))
    (->> sessions-with-dates-idx
         (filter #(apply date-between? (:date %) zoom-dates))
         (map row-fn)
         (cons #js ["Sessão"
                    "Volume"
                    #js {:role "style"}
                    #js {:role "tooltip"}
                    #js {:role "interval"}
                    #js {:role "interval"}
                    "Intensidade"
                    #js {:role "style"}
                    #js {:role "tooltip"}
                    #js {:role "interval"}
                    #js {:role "interval"}])
         into-array)))

(defn microciclos->ranged-micros
  "Output example:
    ([0 2] [3 5] [6 8] [9 11] [12 14] [15 17] [18 20] [21 23] [24 26] [27 29] [30 31])"
  [micros]
  (map (fn [first last] [first last]) (into [0] micros) micros))

(defn micro-chart-data [sessions [selection-f selection-l] micros]
  (let [summed-volumes (fn [sessions]
                         (->> sessions
                              (map #(into [(% :reps-max) (% :total-sets)]))
                              (map #(apply periodization/session-volume %))
                              (reduce +)))
        avg-intensity (fn [sessions]
                        (->> sessions
                             (map :reps-max)
                             (map periodization/reps-to-intensity)
                             (reduce +)
                             (#(/ % (count sessions)))))
        row-fn (fn [index micro-range]
                 #js [(str "Micro " (inc index))
                      (summed-volumes (util/select-indexes sessions micro-range))
                      (str "color: " (if (= micro-range [selection-f selection-l])
                                       "#3bbc8e" #_"#3b3fbc"
                                       "#74deb8" #_"#b3b4e5"))
                      (avg-intensity (util/select-indexes sessions micro-range))
                      (str "color: " (if (= micro-range [selection-f selection-l])
                                       "#ffbd38" #_"#f5ff37"
                                       "#ffcf70" #_"#faff9c"))])]
    (->> micros
         microciclos->ranged-micros
         (map-indexed row-fn)
         (cons #js ["Micro"
                    "Volume do Micro"
                    #js {:role "style"}
                    "Intensidade"
                    #js {:role "style"}])
         into-array)))

(defn reps->intensity-text [min max]
  (if (= min max)
    (str (Math.round (periodization/reps-to-intensity min)) "%")
    (str (Math.round (periodization/reps-to-intensity max)) "%-"
         (Math.round (periodization/reps-to-intensity min)) "%")))

(defn reps->reps-zone [min max]
  (if (= min max)
    (str min "RM")
    (str min "-" max "RM")))

(defn draw-chart [element-id data-array chart-width options]
  #(let [g-charts-instance (new google-charts)
         el (-> js/document (.getElementById element-id))
         data (fn [] (-> g-charts-instance .-api .-visualization
                  (.arrayToDataTable data-array)))
         chart (fn []
                 (set! (-> el .-style .-width)
                       (-> js/document
                           (.getElementsByClassName "com-rigsomelight-devcard")
                           (.item 0)
                           .-clientWidth
                           (* chart-width)
                           (str "px")))
                 (new (-> g-charts-instance .-api
                               .-visualization .-ColumnChart) el))
         draw-fn (fn [] (-> (chart) (.draw (data) options)))]
     (-> g-charts-instance (.load draw-fn))))

(defn normal-chart-options [vol-min vol-max inten-min inten-max]
  #js {:theme "maximized"
       :legend #js {:position "none"}
       :series #js {"0" #js {:targetAxisIndex 0}
                    "1" #js {:targetAxisIndex 1}}
       :bar #js {:groupWidth "70%"}
       :vAxis #js {:gridlines #js {:color "transparent"}}
       :vAxes #js [#js {:textPosition "none"
                        :minValue vol-min
                        :maxValue vol-max
                        :viewWindowMode "maximized"}
                   #js {:textPosition "none"
                        :minValue inten-min
                        :maxValue inten-max
                        :viewWindowMode "maximized"}]})

(defn side-arrows [{:keys [onClickLeft onClickRight style]} & children]
  [:div
   {:style (js->clj (merge {:display "flex"
                            :margin "0 -12px"}
                           (js->clj style)))}
   [:> chevron-left
    {:onClick onClickLeft}]
   (map-indexed #(with-meta %2 {:key %1}) children)
   [:> chevron-right
    {:onClick onClickRight}]])

(defn old-session-component
  "Show last session, but edit all the selected range."
  [{:keys [selected-sessions]}]
  (let [{:keys [reps-min reps-max total-sets rest-time] :as session}
          (last selected-sessions)]
    [:div
     [:h3 "Intensidade: " (reps->intensity-text
                            reps-min
                            reps-max)]
     [:h3 "Repetições: " (reps->reps-zone
                           reps-min
                           reps-max)
      " "
      [:> material-Button
       {:variant "outlined"
        :size "small"
        :color "secondary"
        :onClick #(re-frame/dispatch [::events/decrease-reps-range])}
       [:> chevron-left]]
      [:> material-Button
       {:variant "outlined"
        :size "small"
        :color "secondary"
        :onClick #(re-frame/dispatch [::events/increase-reps-range])}
       [:> chevron-right]]]
     [side-arrows
      {:onClickLeft #(re-frame/dispatch [::events/reps-slider-change (dec reps-min)])
       :onClickRight #(re-frame/dispatch [::events/reps-slider-change (inc reps-min)])}
      [:> material-slider
       {:min 1
        :max 30
        :value reps-min
        :marks [{:value 1 :label "1RM"}
                {:value 8 :label "8RM"}
                {:value 15 :label "15RM"}
                {:value 20 :label "20RM"}
                {:value 25 :label "25RM"}]
        :onChange #(re-frame/dispatch [::events/reps-slider-change %2])}]]
     [:h3 "Séries: "
      [:input {:type "number"
               :min 1
               :max 99
               :value total-sets
               :onChange #(re-frame/dispatch [::events/total-sets-changed
                                              (-> % .-target .-value)])}]]
     [:h3 "Descanso por série: "
      (util/seconds->minute-text rest-time)]
     [side-arrows
      {:onClickLeft #(re-frame/dispatch [::events/rest-slider-changed (- rest-time 15)])
       :onClickRight #(re-frame/dispatch [::events/rest-slider-changed (+ rest-time 15)])}
      [:> material-slider
       {:value rest-time
        :onChange #(re-frame/dispatch [::events/rest-slider-changed %2])
        :marks [{:value 0 :label "0"}
                {:value 60 :label "1:00"}
                {:value 120 :label "2:00"}
                {:value 180 :label "3:00"}
                {:value 240 :label "4:00"}]
        :min 0
        :max 300
        :step 15}]]
     [:h3 "Volume total (Intens. x Rep. x Séries): "
      (periodization/session->total-volume session)]
     [:h3 "Tempo estimado da sessão: "
      (-> session periodization/session->time-estimate
          (util/round-to-precision 300)
          util/seconds->minute-text)]
     [:h3 "Relação [Execução Descanso]: "
      (str "["
           (Math.round (* 100 (/ (periodization/execution-time reps-max
                                                               total-sets)
                                 (periodization/session->time-estimate session))))
           "% "
           (Math.round (* 100 (/ (periodization/total-rest-time total-sets
                                                                rest-time)
                                 (periodization/session->time-estimate session))))
           "%]")]]))

(defn session-component
  "Show last session, but edit all the selected range."
  [{:keys [selected-sessions]}]
  (let [{:keys [reps-min reps-max total-sets rest-time] :as session}
        (last selected-sessions)
        two-line-box {:display "flex"
                      :flexFlow "column"
                      :alignItems "center"
                      :flexGrow 1
                      :padding "4px 0"
                      :margin "10px 4px 0 4px"
                      :boxShadow "1px 3px 6px 2px #0000003b"}]
     [:<>
      [:div
       {:style #js {:display @(re-frame/subscribe [::app-state/set-inten-boxes-display])}}
       [:div
        {:style (clj->js (merge two-line-box {:backgroundColor "#b3e5e3"}))
         :onClick #(re-frame/dispatch [::events/session-sets-box-clicked])
         }
        [:b total-sets] [:span "Séries"]]
       [:div
        {:style (clj->js (merge two-line-box {:backgroundColor "#ffe99c"}))
         :onClick #(re-frame/dispatch [::events/session-intensity-box-clicked])}
        [:b (str reps-min "-" reps-max "RM")] [:span "Intensidade"]]]
      [:div.adjust-intensity
       {:style #js {:backgroundColor "#ebebeb"
                    :height "14vh"
                    :display @(re-frame/subscribe
                                [::app-state/adjust-intensity-display])
                    :grid "2fr 1fr / 1fr 1fr 1fr"
                    :marginTop "2px"
                    }}
       [:span
        {:style #js {:gridArea "1 / 1 / 2 / 4"
                     :placeSelf "end center"
                     :fontSize "1.07em"}}
        "Intensidade " (reps->intensity-text
                         reps-min
                         reps-max)]
       [:span
        {:style #js {:gridArea "2 / 1"
                     :placeSelf "center end"
                     :backgroundColor "white"
                     :borderRadius "30px"
                     :width "30px"
                     :height "30px"
                     :fontSize "3em"
                     :boxShadow "1px 1px 2px 0px black"
                     :display "flex"
                     :justifyContent "center"
                     :alignItems "center"
                     }
         :onClick #(re-frame/dispatch [::events/reps-slider-change (dec reps-min)])}
        [:span {:style #js {:paddingBottom "7px"}} "-"]]
       [:b
        {:style #js {:gridArea "2 / 2"
                     :placeSelf "center"
                     :fontSize "1.57em"}}
        (reps->reps-zone
          reps-min
          reps-max)]
       [:span
        {:style #js {:gridArea "2 / 3"
                     :placeSelf "center start"
                     :backgroundColor "white"
                     :borderRadius "30px"
                     :width "30px"
                     :height "30px"
                     :textAlign "center"
                     :fontSize "2em"
                     :boxShadow "1px 1px 2px 0px black"
                     :display "flex"
                     :justifyContent "center"
                     :alignItems "center"
                     }
         :onClick #(re-frame/dispatch [::events/reps-slider-change (inc reps-min)])}
        [:span {:style #js {:paddingBottom "2px"}} "+"]]
       [:> material-Button
        {:variant "contained"
         :size "small"
         :color "secondary"
         :onClick #(re-frame/dispatch [::events/decrease-reps-range])
         :style #js {:gridArea "2 / 1"
                     :placeSelf "center start"}}
       [:> chevron-left]]
      [:> material-Button
       {:variant "contained"
        :size "small"
        :color "secondary"
        :onClick #(re-frame/dispatch [::events/increase-reps-range])
        :style #js {:gridArea "2 / 3"
                     :placeSelf "center end"}}
       [:> chevron-right]]
       ]
      [:div.adjust-sets
       {:style #js {:backgroundColor "#ebebeb"
                    :height "14vh"
                    :display @(re-frame/subscribe [::app-state/adjust-sets-display])
                    :grid "2fr 1fr / 1fr 1fr 1fr"
                    :marginTop "2px"
                    }}
       [:span
        {:style #js {:gridArea "1 / 2"
                     :placeSelf "end center"
                     :fontSize "1.17em"}}
        "Séries"]
       [:span
        {:style #js {:gridArea "2 / 1"
                     :placeSelf "center end"
                     :backgroundColor "white"
                     :borderRadius "30px"
                     :width "30px"
                     :height "30px"
                     :fontSize "3em"
                     :boxShadow "1px 1px 2px 0px black"
                     :display "flex"
                     :justifyContent "center"
                     :alignItems "center"
                     }
         :onClick #(re-frame/dispatch [::events/total-sets-changed
                                       (dec total-sets)])}
        [:span {:style #js {:paddingBottom "7px"}} "-"]]
       [:b
        {:style #js {:gridArea "2 / 2"
                     :placeSelf "center"
                     :fontSize "1.57em"}}
        total-sets]
       [:span
        {:style #js {:gridArea "2 / 3"
                     :placeSelf "center start"
                     :backgroundColor "white"
                     :borderRadius "30px"
                     :width "30px"
                     :height "30px"
                     :textAlign "center"
                     :fontSize "2em"
                     :boxShadow "1px 1px 2px 0px black"
                     :display "flex"
                     :justifyContent "center"
                     :alignItems "center"
                     }
         :onClick #(re-frame/dispatch [::events/total-sets-changed
                                       (inc total-sets)])}
        [:span {:style #js {:paddingBottom "2px"}} "+"]]
       ]
      [:div.adjust-rest-time
       {:style #js {:backgroundColor "#ebebeb"
                    :height "14vh"
                    :display @(re-frame/subscribe [::app-state/adjust-rest-time-display])
                    :grid "2fr 1fr / 1fr 1fr 1fr"
                    }}
       [:span
        {:style #js {:gridArea "1 / 1 / 2 / 4"
                     :placeSelf "end center"
                     :fontSize "1.17em"}}
        "Descanso entre séries"]
       [:span
        {:style #js {:gridArea "2 / 1"
                     :placeSelf "center end"
                     :backgroundColor "white"
                     :borderRadius "30px"
                     :width "30px"
                     :height "30px"
                     :fontSize "3em"
                     :boxShadow "1px 1px 2px 0px black"
                     :display "flex"
                     :justifyContent "center"
                     :alignItems "center"
                     }
         :onClick #(re-frame/dispatch [::events/rest-slider-changed (- rest-time 15)])}
        [:span {:style #js {:paddingBottom "7px"}} "-"]]
       [:b
        {:style #js {:gridArea "2 / 2"
                     :placeSelf "center"
                     :fontSize "1.57em"}}
        (util/seconds->minute-text rest-time)]
       [:span
        {:style #js {:gridArea "2 / 3"
                     :placeSelf "center start"
                     :backgroundColor "white"
                     :borderRadius "30px"
                     :width "30px"
                     :height "30px"
                     :textAlign "center"
                     :fontSize "2em"
                     :boxShadow "1px 1px 2px 0px black"
                     :display "flex"
                     :justifyContent "center"
                     :alignItems "center"
                     }
         :onClick #(re-frame/dispatch [::events/rest-slider-changed
                                       (+ rest-time 15)])}
        [:span {:style #js {:paddingBottom "2px"}} "+"]]
       ]
      [:div.adjust-buttons
       {:style #js {:backgroundColor "#ebebeb"
                    :height "16vh"
                    :display @(re-frame/subscribe [::app-state/adjust-buttons-display])
                    :justifyContent "space-around"
                    :alignItems "center"
                    :marginBottom "2px"
                    }}
       [:> material-Button
        {:style #js {:backgroundColor "#3bbcb7"
                     :color "white"
                     }
         :variant "contained"
         :onClick #(re-frame/dispatch [::events/session-adjust-canceled])
         }
        "Cancelar"]
       [:> material-Button
        {:style #js {
                     :width "110px"
                     :backgroundColor "#3bbcb7"
                     :color "white"
                     }
         :onClick #(re-frame/dispatch [::events/session-adjust-confirmed])
         :variant "contained"}
        "Ok"]
       ]
      [:div {:style (clj->js (dissoc two-line-box :boxShadow))}
       [:b
        (-> session periodization/session->time-estimate
            (util/round-to-precision 300) util/seconds->minute-text)]
       [:span "Tempo estimado da sessão"]]])
 )

#_(defcard-rg Sessão
  (fn [devcard-data _]
    (let [{:keys [hidden?]} @devcard-data]
      (swap! devcards-hidden conj hidden?)
      [:<>
       [:div.card-expander
        {:onClick #(swap! hidden? not)
         :style #js {:textAlign "center"}}
        (if @hidden?
          [:> material-icons-ExpandMore]
          [:> material-icons-ExpandLess])]
       [:div.card-container
        {:style #js {:display "flex"
                     :justifyContent "space-evenly"}}
        [:div.component-container
         {:hidden @hidden?}
         [:h3
          {:style #js {:textAlign "center"}}
          "Sessão " (let [[selection-start selection-end] @(re-frame/subscribe [::app-state/session-selection])]
                      (str (inc selection-start) "-" selection-end))
          " "
          [:> material-Button
           {:variant "outlined"
            :size "small"
            :color "secondary"
            :onClick #(re-frame/dispatch [::events/decrease-selected-range])}
           [:> chevron-left]]
          [:> material-Button
           {:variant "outlined"
            :size "small"
            :id "teste"
            :color "secondary"
            :onClick #(re-frame/dispatch [::events/increase-selected-range])}
           [:> chevron-right]]]
         [side-arrows
          {:onClickLeft #(re-frame/dispatch
                           [::events/session-sel-slider-changed
                            (dec (first @(re-frame/subscribe
                                           [::app-state/session-selection])))])
           :onClickRight #(re-frame/dispatch
                            [::events/session-sel-slider-changed
                             (inc (first @(re-frame/subscribe
                                            [::app-state/session-selection])))])}
          [:> material-slider
          {:min 0
           :max (count @(re-frame/subscribe [::app-state/sessions]))
           :value (first @(re-frame/subscribe [::app-state/session-selection]))
           :onChange #(re-frame/dispatch [::events/session-sel-slider-changed %2])}]]
         [:div
          {:style #js {:display "flex"
                       :justifyContent "center"
                       :flexWrap "wrap"}}
          [:span
           {:style #js {:padding "3px"}}
           [:> material-Button
            {:variant "outlined"
             :onClick #(re-frame/dispatch [::events/delete-selected-sessions])}
            "Excluir"]
           [:> material-Button
            {:variant "outlined"
             :onClick #(re-frame/dispatch [::events/duplicate-selected-sessions])}
            "Duplicar"]]
          [:span
           {:style #js {:padding "3px"}}
           [:> material-Button
            {:variant "outlined"
             :onClick #(re-frame/dispatch [::events/move-sessions-left])
             }
            [:> chevron-left]
            "Mover"]
           [:> material-Button
            {:variant "outlined"
             :onClick #(re-frame/dispatch [::events/move-sessions-right])
             }
            "Mover"
            [:> chevron-right]]]]
         [:div [:div#chart-div
                {:style #js {:paddingTop "20px" :height 200}}]]
         ;; Events "load" or "DOMContentLoaded" do not work, try load event on
         ;; the script https://stackoverflow.com/questions/16230886/trying-to-fire-the-onload-event-on-script-tag
         [:img {:src @(re-frame/subscribe [::app-state/sessions])
                :hidden true
                :onError (draw-chart "chart-div"
                                     (sessions->chart-data @(re-frame/subscribe [::app-state/sessions])
                                                           @(re-frame/subscribe [::app-state/session-selection]))
                                     0.9
                                     (normal-chart-options 4085
                                                           14825
                                                           63
                                                           90
                                                           ))}]
         [session-component
          {:selected-sessions (util/select-indexes
                                @(re-frame/subscribe [::app-state/sessions])
                                @(re-frame/subscribe [::app-state/session-selection]))}]]]]))
  {:hidden? (reagent/atom false)})

#_(defcard-rg Antigo-input-de-sessão
  (fn [devcard-data _]
    (let [{:keys [hidden?]} @devcard-data]
      (swap! devcards-hidden conj hidden?)
      [:<>
       [:div.card-expander
        {:onClick #(swap! hidden? not)
         :style #js {:textAlign "center"}}
        (if @hidden?
          [:> material-icons-ExpandMore]
          [:> material-icons-ExpandLess])]
       [:div.card-container
        {:style #js {:display "flex"
                     :justifyContent "space-evenly"}}
        [:div.component-container
         {:hidden @hidden?}
         [old-session-component
          {:selected-sessions (util/select-indexes
                                @(re-frame/subscribe [::app-state/sessions])
                                @(re-frame/subscribe [::app-state/session-selection]))}]]]]))
  {:hidden? (reagent/atom true)})

;; (clojure.set/map-invert models)
;; We can change how sessions and models are compared, so models with different
;; attributes can be defined, e.g. a model setting total-sets and rest-time
;; and another setting reps-min and reps-max.
(defn micro-name [sessions-atoms models]
  (let [sessions (->> sessions-atoms
                      (map #(select-keys % [:reps-min :reps-max :rest-time]))
                      vec)]
    (or (models sessions)
        "Custom.")))

(defn models-names [models]
  (vec (set (vals periodization/micros-models))))

#_(defcard-rg Microciclo
  (fn [devcard-data _]
    (let [{:keys [hidden?]} @devcard-data]
      (swap! devcards-hidden conj hidden?)
      [:<>
       [:div.card-expander
        {:onClick #(swap! hidden? not)
         :style #js {:textAlign "center"}}
        (if @hidden?
          [:> material-icons-ExpandMore]
          [:> material-icons-ExpandLess])]
       [:div.card-container
        {:style #js {:display "flex"
                     :justifyContent "space-evenly"}}
        [:div.component-container
         {:hidden @hidden?}
         [:h3
          {:style #js {:textAlign "center"}}
          "Microciclo " (let [[session-sel-start session-sel-end] @(re-frame/subscribe [::app-state/session-selection])
                              micro-sel-start (@(re-frame/subscribe [::app-state/idx-micros]) session-sel-start)
                              micro-sel-end (@(re-frame/subscribe [::app-state/idx-micros]) session-sel-end)]
                          (str (when micro-sel-start (inc micro-sel-start)) "-" micro-sel-end))
          " "]
         (let [slider-value (@(re-frame/subscribe
                                [::app-state/idx-micros])
                              (first @(re-frame/subscribe
                                        [::app-state/session-selection])))]
           [side-arrows
            {:onClickLeft #(re-frame/dispatch
                             [::events/microcycles-sel-slider-changed
                              (dec slider-value)])
             :onClickRight #(re-frame/dispatch
                              [::events/microcycles-sel-slider-changed
                               (inc slider-value)])}
            [:> material-slider
             {:min 0
              :max (count @(re-frame/subscribe [::app-state/microcycles]))
              :value slider-value
              :onChange #(re-frame/dispatch [::events/microcycles-sel-slider-changed %2])}]])
         [:div
          {:style #js {:display "flex"}}
          [:div#micro-chart
           {:style #js {:padding "10px 0" :height 200}}]
          [:div#micro-sessions-chart
           {:style #js {:padding "10px 0" :height 200}}]
          ]
         ;; Events "load" or "DOMContentLoaded" do not work, try load event on
         ;; the script https://stackoverflow.com/questions/16230886/trying-to-fire-the-onload-event-on-script-tag
         [:img {:src @(re-frame/subscribe [::app-state/sessions])
                :hidden true
                :onError (draw-chart "micro-chart"
                                     (micro-chart-data @(re-frame/subscribe [::app-state/sessions])
                                                       @(re-frame/subscribe [::app-state/session-selection])
                                                       @(re-frame/subscribe [::app-state/microcycles]))
                                     0.6
                                     (normal-chart-options 33375
                                                           55650
                                                           62
                                                           88))}]
         [:img {:src @(re-frame/subscribe [::app-state/sessions])
                :hidden true
                :onError (draw-chart "micro-sessions-chart"
                                     (if (and (@(re-frame/subscribe [::app-state/idx-micros]) (first @(re-frame/subscribe [::app-state/session-selection])))
                                              (@(re-frame/subscribe [::app-state/idx-micros]) (second @(re-frame/subscribe [::app-state/session-selection]))))
                                       (sessions->chart-data (util/select-indexes @(re-frame/subscribe [::app-state/sessions]) @(re-frame/subscribe [::app-state/session-selection]))
                                                             [0 (count @(re-frame/subscribe [::app-state/sessions]))])
                                       #js [#js ["Sessão" "Volume" "Intensidade" ] #js ["1" 0 0]])
                                     0.35
                                     (normal-chart-options 11550
                                                           14825
                                                           60
                                                           75))}]
         [:div ;; div to center the select
          {:style #js {:display "flex"
                       :justifyContent "space-evenly"}}
          [:> material-select
           {:value (micro-name (util/select-indexes @(re-frame/subscribe [::app-state/sessions]) @(re-frame/subscribe [::app-state/session-selection]))
                               periodization/micros-models)
            :onChange #(re-frame/dispatch [::events/update-sessions-by-model
                                           (-> % .-target .-value)])}
           (map #(with-meta
                   [:> material-menu-item {:value %} %]
                   {:key %})
                (models-names periodization/micros-models))
           [:> material-menu-item {:value "Custom." :disabled true} "Custom."]]]]]]))
  {:hidden? (reagent/atom false)})

(defn date-dd-mm [date]
  (when date
    (let [dd (tick/day-of-month date)
          MM (tick/int (tick/month date))]
      (str dd "/" MM))))

(def calendar-chart-options
  #js {:chartArea #js {:width "100%"}
       :legend #js {:position "none"}
       :series #js {"0" #js {:targetAxisIndex 0}
                    "1" #js {:targetAxisIndex 1}}
       :bar #js {:groupWidth "100%"}
       :vAxis #js {:gridlines #js {:color "transparent"}}
       :vAxes #js [#js {:textPosition "none" #_:minValue #_2500
                        :maxValue 35000 :viewWindowMode "maximized"}
                   #js {:textPosition "none" #_:minValue #_5000
                        #_:maxValue #_70000 :viewWindowMode "maximized"}]})

(def calendar-chart-options2
  #js {:title "Volume por Sessão"
       :chartArea #js {:width "100%"}
       :legend #js {:position "none"}
       :series #js {"0" #js {:targetAxisIndex 0}
                    "1" #js {:targetAxisIndex 1}}
       :bar #js {:groupWidth "98%"}
       :vAxis #js {:gridlines #js {:color "transparent"}}
       :vAxes #js [#js {:textPosition "none" :viewWindowMode "maximized"}
                   #js {:textPosition "none" :viewWindowMode "maximized"}]})

(def week-vol-options
  #js {:title "Volume Semanal"
       :chartArea #js {:width "100%"}
       :legend #js {:position "none"}
       :bar #js {:groupWidth "90%"}
       :vAxis #js {:gridlines #js {:color "transparent"}}
       :vAxes #js [#js {:textPosition "none" :viewWindowMode "maximized"
                        :minValue 20000}
                   #js {:textPosition "none" :viewWindowMode "maximized"}]})

(defonce chart-zoom (reagent/atom 30))

(defn calendar-chart-data [calendar sessions]
  (let [session-idx->volume (fn [session-idx]
                              (when session-idx
                                (->> session-idx
                                   (#(nth sessions % {:reps-min 20 :reps-max 20 :total-sets 1 :rest-time 10}))
                                   (#(into [(% :reps-max) (% :total-sets)]))
                                   (apply periodization/session-volume))))
        zoom-in @chart-zoom
        all-days-without-week-vol (map-indexed #(assoc %2 :idx %1) calendar)

        first-week (take-while
                     #(not= (tick/day-of-week (:date %)) tick/SUNDAY)
                     all-days-without-week-vol)
        add-week-vol (fn [week]
                       (when (not (empty? week))
                         (->> week
                              (map :session-idx)
                              (map session-idx->volume)
                              (reduce +)
                              (assoc-in (vec week)
                                        [(dec (count week)) :week-volume]))))
        all-days (as-> all-days-without-week-vol $
                   (drop (count first-week) $)
                   (partition-all 7 $)
                   (map #(if (not= 7 (count %))
                           %
                           (add-week-vol %))
                        $)
                   (flatten (cons  (add-week-vol first-week) $)))

        shift (- (/ (apply + @(re-frame/subscribe [::app-state/calendar-selection])) 2) (/ (count all-days) 2))
        to-drop (-> all-days count (- zoom-in) (/ 2))
        r (drop (+ to-drop shift) all-days)
        some-days (take zoom-in r)
        on-saturday (fn [date if-true if-false]
                      (if (= (tick/day-of-week date) tick/SATURDAY)
                        if-true
                        if-false))
        row-fn (fn [{:keys [date session-idx absent? week-volume idx]
                     :or {date "2020-01-01"}}]
                 (cond
                   absent?
                     #js [(date-dd-mm date)
                          0
                          "color: red"
                          (str (date-str date)
                               "\nSeu aluno faltou nesse dia")
                          "Falta"
                          (on-saturday date week-volume 0)
                          (str "color: " (if (util/between? idx @(re-frame/subscribe  [::app-state/calendar-selection]))
                                           "blue"
                                           "lightblue"))
                          (on-saturday date "Volume semanal" nil)
                          ]
                   (and (not (nil? session-idx)) (nth sessions session-idx false))
                     #js [(date-dd-mm date)
                          (session-idx->volume session-idx)
                          (str "color: " (if (util/between? idx @(re-frame/subscribe  [::app-state/calendar-selection]))
                                           "#3bbcb7"
                                           "#b3e5e3"))
                          (str (date-str date)
                               "\nSessão: " (inc session-idx)
                               "\nVolume: " (session-idx->volume session-idx))
                          nil
                          (on-saturday date week-volume 0)
                          (str "color: " (if (util/between? idx @(re-frame/subscribe  [::app-state/calendar-selection]))
                                           "blue"
                                           "lightblue"))
                          (on-saturday date "Volume semanal" nil)]
                   :else #js [(date-dd-mm date) 0 "" "" ""
                              (on-saturday date week-volume 0)
                              (str "color: " (if (util/between? idx @(re-frame/subscribe  [::app-state/calendar-selection]))
                                               "blue"
                                               "lightblue"))
                              (on-saturday date "Volume semanal" nil)]))]
    (->> some-days
         (map row-fn)
         (cons #js ["Data"
                    "Volume ou falta"
                    #js {:role "style"}
                    #js {:role "tooltip"}
                    #js {:role "annotation"}
                    "Volume semanal"
                    #js {:role "style"}
                    #js {:role "annotation"}
                    ])
         into-array)))

(defn calendar-chart-data2 [calendar sessions]
  (let [session-idx->volume (fn [session-idx]
                              (when session-idx
                                (->> session-idx
                                   (#(nth sessions % {:reps-min 20 :reps-max 20 :total-sets 1 :rest-time 10}))
                                   (#(into [(% :reps-max) (% :total-sets)]))
                                   (apply periodization/session-volume))))
        zoom-in 21
        all-days (map-indexed #(assoc %2 :idx %1) calendar)
        shift (- (/ (apply + @(re-frame/subscribe [::app-state/calendar-selection])) 2) (/ (count all-days) 2))
        to-drop (-> all-days count (- zoom-in) (/ 2))
        r (drop (+ to-drop shift) all-days)
        some-days (take zoom-in r)
        row-fn (fn [{:keys [date session-idx absent? idx]
                     :or {date "2020-01-01"}}]
                 (cond
                   absent?
                     #js [(date-dd-mm date)
                          0
                          "color: red"
                          (str (date-str date)
                               "\nSeu aluno faltou nesse dia")
                          "Falta"
                          ]
                   (and (not (nil? session-idx)) (nth sessions session-idx false))
                     #js [(date-dd-mm date)
                          (session-idx->volume session-idx)
                          (str "color: " (if (util/between? idx @(re-frame/subscribe  [::app-state/calendar-selection]))
                                           "#3bbcb7"
                                           "#b3e5e3"))
                          (str (date-str date)
                               "\nSessão: " (inc session-idx)
                               "\nVolume: " (session-idx->volume session-idx))
                          nil]
                   :else #js [(date-dd-mm date) 0 "" "" ""]))]
    (->> some-days
         (map row-fn)
         (cons #js ["Data"
                    "Volume ou falta"
                    #js {:role "style"}
                    #js {:role "tooltip"}
                    #js {:role "annotation"}])
         into-array)))

(defn week-vol-chart-data [calendar sessions]
  (let [session-idx->volume (fn [session-idx]
                              (when session-idx
                                (->> session-idx
                                   (#(nth sessions % {:reps-min 20 :reps-max 20 :total-sets 1 :rest-time 10}))
                                   (#(into [(% :reps-max) (% :total-sets)]))
                                   (apply periodization/session-volume))))
        zoom-in 21
        all-days-without-week-vol (map-indexed #(assoc %2 :idx %1) calendar)

        first-week (take-while
                     #(not= (tick/day-of-week (:date %)) tick/SUNDAY)
                     all-days-without-week-vol)
        add-week-vol (fn [week]
                       (when (not (empty? week))
                         (->> week
                              (map :session-idx)
                              (map session-idx->volume)
                              (reduce +)
                              (assoc-in (vec week)
                                        [(dec (count week)) :week-volume]))))
        all-days (as-> all-days-without-week-vol $
                   (drop (count first-week) $)
                   (partition-all 7 $)
                   (map #(if (not= 7 (count %))
                           %
                           (add-week-vol %))
                        $)
                   (flatten (cons  (add-week-vol first-week) $)))

        shift (- (/ (apply + @(re-frame/subscribe [::app-state/calendar-selection])) 2) (/ (count all-days) 2))
        to-drop (-> all-days count (- zoom-in) (/ 2))
        r (drop (+ to-drop shift) all-days)
        some-days (take zoom-in r)
        on-saturday (fn [date if-true if-false]
                      (if (= (tick/day-of-week date) tick/SATURDAY)
                        if-true
                        if-false))
        row-fn (fn [{:keys [date session-idx absent? week-volume idx]
                     :or {date "2020-01-01"}}]
                 #js [(case date
                        "2019-05-25" "Sem 5"
                        "2019-06-01" "Sem 6"
                        "2019-06-08" "Sem 7"
                        (date-dd-mm date))
                      week-volume
                      (str "color: " (if (util/between? idx @(re-frame/subscribe  [::app-state/calendar-selection]))
                                       "blue"
                                       "lightblue"))])]
    (->> some-days
         (filter :week-volume)
         (map row-fn)
         (cons #js ["Data"
                    "Volume semanal"
                    #js {:role "style"}])
         into-array)))

#_(defcard-rg Calendário
  (fn [devcard-data _]
    (let [{:keys [hidden?]} @devcard-data]
      (swap! devcards-hidden conj hidden?)
      [:<>
       [:div.card-expander
        {:onClick #(swap! hidden? not)
         :style #js {:textAlign "center"}}
        (if @hidden?
          [:> material-icons-ExpandMore]
          [:> material-icons-ExpandLess])]
       [:div.card-container
        {:style #js {:display "flex"
                     :justifyContent "space-evenly"}}
        [:div.component-container
         {:hidden @hidden?}
         [:h3
          {:style #js {:textAlign "center"}}
          [:span
           {:style #js {:flexBasis "100%"}}
           (if (= (reduce - @(re-frame/subscribe  [::app-state/calendar-selection])) -1)
             (date-str (:date (nth @(re-frame/subscribe [::app-state/calendar])
                                   (first @(re-frame/subscribe [::app-state/calendar-selection]))
                                   {:date "2020-01-01"})))
             (str (date-str (:date (nth @(re-frame/subscribe [::app-state/calendar])
                                        (first @(re-frame/subscribe  [::app-state/calendar-selection]))
                                        {:date "2020-01-01"})))
                  " - "
                  (date-str (:date (nth @(re-frame/subscribe [::app-state/calendar])
                                        (dec (second @(re-frame/subscribe  [::app-state/calendar-selection])))
                                        {:date "2020-01-01"})))))]]
         [:div
          {:style #js {:display "flex"
                       :justifyContent "space-between"}}
          [:div
           [:> material-Button
            {:variant "outlined"
             :size "small"
             :disabled (= (count @(re-frame/subscribe [::app-state/calendar]))
                          @chart-zoom)
             :onClick #(swap! chart-zoom inc)
             :color "secondary"}
            [:> material-icons-search]
            "-"]
           [:> material-Button
            {:variant "outlined"
             :size "small"
             :disabled (= 1 @chart-zoom)
             :onClick #(swap! chart-zoom dec)
             :color "secondary"}
            [:> material-icons-search]
            "+"]]
          [:div
           [:> material-Button
            {:variant "contained"
             :color (if (= (reduce - @(re-frame/subscribe  [::app-state/calendar-selection])) -1)
                      "default"
                      "primary")
             :onClick #(re-frame/dispatch [::events/toggle-multiple-calendar-selection])}
            "Selecionar intervalo"]]]
         (if (= (reduce - @(re-frame/subscribe  [::app-state/calendar-selection])) -1)
           (let [slider-value (first @(re-frame/subscribe
                                        [::app-state/calendar-selection]))]
             [side-arrows
              {:style #js {:margin "10px -12px"}
               :onClickLeft #(re-frame/dispatch
                               [::events/reset-calendar-selection [(dec slider-value) (slider-value)]])
               :onClickRight #(re-frame/dispatch
                                [::events/reset-calendar-selection [(inc slider-value) (+ 2 slider-value)]])}
              [:> material-slider
               {:min 0
                :max (dec (count @(re-frame/subscribe [::app-state/calendar])))
                :value slider-value
                :marks [{:value (util/days-difference @(re-frame/subscribe [::app-state/today])
                                                      @(re-frame/subscribe [::app-state/first-calendar-day]))
                         :label "Hoje"}]
                :onChange #(re-frame/dispatch [::events/reset-calendar-selection [%2 (inc %2)]])}]])
           (let [[slider-value-left slider-value-right]
                 @(re-frame/subscribe  [::app-state/calendar-selection])]
             [side-arrows
              {:style #js {:margin "10px -12px"}
               :onClickLeft #(re-frame/dispatch
                               [::events/reset-calendar-selection
                                [(dec slider-value-left) (dec slider-value-right)]])
               :onClickRight #(re-frame/dispatch
                                [::events/reset-calendar-selection
                                 [(inc slider-value-left) (inc slider-value-right)]])}
              [:> material-slider
               {:min 0
                :max (count @(re-frame/subscribe [::app-state/calendar]))
                :value [slider-value-left slider-value-right]
                :marks [{:value (util/days-difference @(re-frame/subscribe [::app-state/today])
                                                      @(re-frame/subscribe [::app-state/first-calendar-day]))
                         :label "Hoje"}]
                :onChange #(re-frame/dispatch [::events/reset-calendar-selection %2])}]]))
         [:span
          "Próxima sessão do aluno: "
          (inc (:session-idx
                 (util/first-filter #(tick/>= (tick/date (:date %))
                                              (tick/date @(re-frame/subscribe [::app-state/today])))
                                    (filter :session-idx
                                            @(re-frame/subscribe
                                               [::app-state/calendar])))))]
         [:div#calendar-chart
          {:style #js {:height 200}}]
         ;; Events "load" or "DOMContentLoaded" do not work, try load event on
         ;; the script https://stackoverflow.com/questions/16230886/trying-to-fire-the-onload-event-on-script-tag
         [:img {:src @(re-frame/subscribe [::app-state/sessions])
                :hidden true
                :onError (draw-chart "calendar-chart"
                                     (calendar-chart-data @(re-frame/subscribe [::app-state/calendar])
                                                          @(re-frame/subscribe [::app-state/sessions]))
                                     0.93
                                     calendar-chart-options)}]
         [:div
          {:style #js {:display "flex"
                       :justifyContent "center"}}
          [:> material-Button
           {:variant "outlined"
            :onClick #(re-frame/dispatch [::events/move-calendar-sel-left])}
           [:> chevron-left]
           "Mover"]
          [:> material-Button
           {:variant "outlined"
            :onClick #(re-frame/dispatch [::events/move-calendar-sel-right])}
           "Mover"
           [:> chevron-right]]]
         [:> form-control-label
          {:control (reagent/as-element
                      [:> material-checkbox
                       {:checked @(re-frame/subscribe [::app-state/absent?])
                        :onChange #(re-frame/dispatch
                                     [::events/toggled-absent
                                      (-> % .-target .-checked)]) } ])
           :label "Meu aluno faltou nesse dia"}]]]]))
  {:hidden? (reagent/atom true)})

#_(defcard-rg Calendário2
  (fn [devcard-data _]
    (let [{:keys [hidden?]} @devcard-data]
      (swap! devcards-hidden conj hidden?)
      [:<>
       [:div.card-expander
        {:onClick #(swap! hidden? not)
         :style #js {:textAlign "center"}}
        (if @hidden?
          [:> material-icons-ExpandMore]
          [:> material-icons-ExpandLess])]
       [:div.card-container
        {:style #js {:display "flex"
                     :justifyContent "space-evenly"}}
        [:div.component-container
         {:hidden @hidden?}
         [:h3
          {:style #js {:textAlign "center"}}
          [:span
           {:style #js {:flexBasis "100%"}}
           "Semana 5-7"]]
         [:div
          {:style #js {:display "flex"}}
          [:div#calendar-chart2
           {:style #js {:height 200}}]
          [:div#week-vol-chart
           {:style #js {:height 200}}]]
         ;; Events "load" or "DOMContentLoaded" do not work, try load event on
         ;; the script https://stackoverflow.com/questions/16230886/trying-to-fire-the-onload-event-on-script-tag
         [:img {:src @(re-frame/subscribe [::app-state/sessions])
                :hidden true
                :onError (draw-chart "calendar-chart2"
                                     (calendar-chart-data2 @(re-frame/subscribe [::app-state/calendar])
                                                          @(re-frame/subscribe [::app-state/sessions]))
                                     0.6
                                     calendar-chart-options2)}]
         [:img {:src @(re-frame/subscribe [::app-state/sessions])
                :hidden true
                :onError (draw-chart "week-vol-chart"
                                     (week-vol-chart-data @(re-frame/subscribe [::app-state/calendar])
                                                          @(re-frame/subscribe [::app-state/sessions]))
                                     0.35
                                     week-vol-options)}]
         ]]]))
  {:hidden? (reagent/atom false)})

(defcard-rg Por-que-periodizar?
  (fn [devcard-data _]
    (let [{:keys [hidden?]} @devcard-data]
      (swap! devcards-hidden conj hidden?)
      [:<>
       [:div.card-expander
        {:onClick #(swap! hidden? not)
         :style #js {:textAlign "center"
                     :padding "20px 0"}}
        [:h2 {:style #js {:textAlign "center"
                          :margin "20px 0 10px 0"}}
         "Por que periodizar?"]
        (if @hidden?
          [:> material-icons-ExpandMore
           {:style #js {:padding "0 10px"
                        :border "1px solid lightgray"
                        :borderRadius "7px"}}]
          [:> material-icons-ExpandLess
           {:style #js {:padding "0 10px"
                        :border "1px solid lightgray"
                        :borderRadius "7px"}}])]
       [:div.card-container
        (let [p-style #js {:textIndent "30px"}]
          [:div.component-container
           {:hidden @hidden?}
           [:p {:style p-style}
            "A periodização surge como uma forma de facilitar e tornar mais eficaz a organização de um programa de treinamento, adequando cada fase e suas variáveis, para alcançar os objetivos do indivíduo, seja ele um atleta ou não. Esse sistema se ajusta à necessidade do treinamento e de suas variáveis, potencializando o resultado. Por conseguinte, melhores resultados são obtidos devido à organização da variedade de métodos existentes, pela implementação estratégica das fases e das cargas específicas, causando alternância nos estímulos. Um exemplo prático é a estabilização dos processos hipertróficos observados após quatro a cinco meses de treinamento quando são utilizadas cargas fixas, três séries de 10 repetições máximas (RM) durante todo o período. Na periodização, o aluno iniciante de academia pode ser submetido a uma carga de hipertrofia por quatro semanas, 3 séries de 12-14RM, seguido de mais quatro semanas com outra carga de hipertrofia em outra intensidade, por exemplo, 3 séries de 8-10RM. Em suma, o praticante treinará para atingir seus objetivos, porém com cargas variadas durante o seu ciclo semestral ou anual, sem esquecer que os ciclos (tempo em que a carga será realizada) devem ser respeitados. Enfim, periodizar não se trata apenas de modificar as variáveis do treinamento de maneira aleatória, mas sim de respeitar as modificações de acordo com os ciclos programados."]
           [:p {:style p-style}
            "Vale ressaltar que a periodização não é um conceito rígido, podendo ser aplicado às mais variadas populações, como atletas de diversas modalidades, indivíduos ativos e/ou sedentários, desde que sejam considerados os diferentes compromissos pessoais e profissionais. No caso dos praticantes de treinamento de força em academias e alunos de treinamento personalizado, os objetivos podem ser: ganhos de aptidão física voltada à saúde, emagrecimento, aumento de força, resistência, flexibilidade, aumento da massa magra, entre outros."]
           [:p {:style p-style}
            "Na comparação entre programas periodizados e não periodizados, foi demonstrada a superioridade do treinamento periodizado no aumento de força muscular. De fato, estudos que compararam treinamentos de força periodizados com não periodizados evidenciaram que a periodização foi mais eficiente em promover alterações positivas nos componentes da composição corporal e da força máxima. Programas não periodizados com cargas fixas também promovem alterações positivas na composição corporal e na força, porém, por períodos limitados, até quatro a cinco meses. Desse modo, periodizar auxilia no processo de melhora das capacidades funcionais por períodos superiores a seis meses."]
           [:p {:style p-style}
            "Os programas de treinamento de força periodizados com variação da intensidade e períodos ativos de descanso podem atenuar a estabilização dos resultados no desempenho, diminuindo a probabilidade de sobretreinamento e proporcionando maiores aumentos na força e na potência."]
           [:p {:style p-style}
            "Os objetivos da periodização incluem maximizar o princípio da sobrecarga e garantir uma melhor relação entre estresse e recuperação (heterocronismo). O princípio da sobrecarga pode ser descrito pelo processo de aplicação de cargas às quais o sistema neuromuscular não está adaptado. Quando maiores demandas são impostas ao sistema neuromuscular, ocorrem adaptações que resultam em níveis aumentados de força. As variáveis do treinamento que podem ser articuladas para aperfeiçoar o programa são: número de séries realizadas em cada exercício, número de repetições por série, exercícios realizados, número de exercícios realizados a cada sessão, períodos de descanso entre as séries e exercícios, carga utilizada a cada série, tipo e velocidade da ação muscular utilizada (concêntrica, excêntrica, isométrica), número de sessões de treinamento realizadas por dia e por semana. Conforme comentado anteriormente, o treinamento de força em academias também requer a organização em ciclos, nos quais as suas variáveis são sistematizadas."]
           [:p {:style p-style}
            [:a {:href "https://books.google.com.br/books?id=r2aJDAAAQBAJ"}
             "Prestes, Jonato, et al. \"Prescrição e periodização do treinamento de força em academias.\" (2010)."
             ]]
           ])]]))
  {:hidden? (reagent/atom true)}
  {:frame true
   :heading false})

;; Isso aqui vai salvar no db do firebase sempre que o domain mudar.
(defcard-rg external-storage
  #(into [ext-store/firebase-el])
  {}
  {:frame false
   :heading false})

(defn replace-logo [event]
  (let [periodiza-logo (-> js/document (.createElement "img"))
        breadcrumb (-> js/document
                       (.getElementsByClassName
                         "com-rigsomelight-devcards_set-current-path")
                       (.item 0))
        cljs-logo (-> js/document
                      (.getElementsByClassName "cljs-logo")
                      (.item 0))]
    (when cljs-logo
      (do
        (set! (-> periodiza-logo .-src) "images/manifest/icon-48x48.png")
        (set! (-> cljs-logo .-parentNode .-style)
              "display: flex; width: 100%; justify-content: flex-end; margin-top: -16px")
        (set! (-> cljs-logo .-parentNode .-parentNode .-style)
              "display: flex;")
        (set! (-> breadcrumb .-innerHTML) "Periodiza")
        (-> cljs-logo .-parentNode (.replaceChild periodiza-logo cljs-logo))))))

(defcard-rg replace-logo
  #(into [:img {:src "" :onError replace-logo}])
  {}
  {:frame false
   :heading false})

(spec/def ::redefine-periodization-goal-select
  (spec/tuple #{::redefine-periodization-goal-select}
              #{"Hipertrofia" "Força" "Potência" "Resistência"}))

(spec/def ::redefine-periodization-level-select
  (spec/tuple #{::redefine-periodization-level-select}
              #{"Iniciante" "Intermediário" "Avançado"}))

(spec/def ::redefine-periodization-week-sessions-toggle
  (spec/tuple #{::redefine-periodization-week-sessions-toggle}
              #{"Domingo" "Segunda" "Terça" "Quarta" "Quinta" "Sexta" "Sábado"}))

;; TODO: use fmap to build a generator that
;; subtract days from a initial date using tick
(spec/def ::redefine-periodization-planning-start-event
  (spec/tuple #{::redefine-periodization-planning-start-event}
              #{"2018-08-01" "2018-09-01" "2018-10-01" "2018-11-01" "2018-12-01" "2019-01-01" "2019-02-01" "2019-03-01" "2019-04-01" "2019-05-01" "2019-06-01" "2019-07-01"}))

(spec/def ::redefine-periodization-planning-end-event
  (spec/tuple #{::redefine-periodization-planning-end-event}
              #{"2019-08-01" "2019-09-01" "2019-10-01" "2019-11-01" "2019-12-01" "2020-01-01" "2020-02-01" "2020-03-01" "2020-04-01" "2020-05-01" "2020-06-01" "2020-07-01" "2020-08-01"}))

(spec/def ::redefine-periodization-session-time-target-add
  (spec/tuple #{::redefine-periodization-session-time-target-add}
              #{300 600 900 -300 -600 -900}))

(spec/def ::dispatch-an-event-args
  (spec/or :redef-goal    ::redefine-periodization-goal-select
           :redef-level   ::redefine-periodization-level-select
           :redef-wk-days ::redefine-periodization-week-sessions-toggle
           :redef-end     ::redefine-periodization-planning-start-event
           :redef-start   ::redefine-periodization-planning-end-event
           :redef-time    ::redefine-periodization-session-time-target-add))

(defn dispatch-an-event [[event & args]]
  (apply #(re-frame/dispatch [event %]) args))

;; (def events-atom (atom []))
;; (defn set-events! [num-events]
;;   (reset! events-atom (gen/sample (spec/gen ::dispatch-an-event-args) num-events)))
;; (defn dispatch-random-event! []
;;   (let [event-to-dispatch (first @events-atom)]
;;     (dispatch-an-event event-to-dispatch)
;;     (swap! events-atom rest)
;;     (str event-to-dispatch)))

(comment
  (require '[clojure.spec.gen.alpha :as gen])
  (require '[clojure.test.check.generators])
  (def events-atom (atom (gen/sample (spec/gen ::dispatch-an-event-args))))
  (do
    (dispatch-an-event (first @events-atom))
    (swap! events-atom rest)
    )
  (map #(dispatch-an-event (first @events-atom)) @events-atom)
  )
